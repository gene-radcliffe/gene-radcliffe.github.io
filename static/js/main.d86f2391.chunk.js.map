{"version":3,"sources":["logo.svg","Slides.js","Project.js","Portfolio.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","default_style","display","Slides","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","style_props","children","current_slide","slide_count","moveToNextSlide","bind","assertThisInitialized","moveToPreviousSlide","cloned_children","React","Children","map","child","cloneElement","style","className","setState","count","console","log","index","child_index","react_default","a","createElement","onClick","config","buttons","Fragment","id","renderNavigatorPreviousButton","renderSlide","renderNavigatorNextButton","carousel","renderRegular","Component","Projects","styled","h2","_templateObject","slidesStyle","Project","src_Slides","Span","span","Portfolio_templateObject","Hero","div","_templateObject2","Portfolio","src_Project","Boolean","window","location","hostname","match","ReactDOM","render","src_Portfolio","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d86f2391.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport 'spectre.css/dist/spectre.css';\nimport 'spectre.css/dist/spectre-icons.css'\nimport ReactDom from 'react-dom'\n\nconst default_style={\n    display: 'block',\n}\n\nclass Slides extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            style_props: null,\n            children: null,\n            current_slide:null,\n            slide_count:null,\n        }\n        this.moveToNextSlide = this.moveToNextSlide.bind(this);\n        this.moveToPreviousSlide= this.moveToPreviousSlide.bind(this);\n\n    }\n    componentDidUpdate(){\n        \n    }\n    componentDidMount(){\n        \n        const cloned_children = React.Children.map(this.props.children, child =>{\n            return React.cloneElement(child, {\n                style: default_style,\n                className: \"Slide\"\n            })\n        })\n        \n        this.setState({children: cloned_children,\n                      current_slide: 0,\n                      slide_count: React.Children.count(cloned_children)\n        })\n        \n    }\n    moveToPreviousSlide(){\n        if(this.state.current_slide == 0){\n            console.log(\"return\")\n            return\n        }\n       \n        if(this.state.current_slide >= 1){\n            console.log(\"setting\")\n            this.setState(state =>{\n                return{current_slide: state.current_slide -1 }\n            }) \n        }\n        \n    }\n    moveToNextSlide(){\n       \n        if(this.state.current_slide == this.state.slide_count-1){\n           \n            return\n        }else{\n           \n            this.setState( (state)=>{\n                return {current_slide: (state.current_slide + 1)}\n            })\n        }\n        \n        \n       \n    }\n\n    renderSlide(){\n        var index = this.state.current_slide\n        const slide = React.Children.map(this.state.children, (child, child_index) =>{\n            if(index == child_index){\n                return child;\n            }\n        })\n\n        return slide\n    }\n\n    renderNavigatorNextButton(){\n       \n        return <button className=\"btn\" onClick={this.moveToNextSlide}><i className=\"icon icon-arrow-right\"></i></button>  \n        \n    }\n    renderNavigatorPreviousButton(){\n        return <button className=\"btn\" onClick={this.moveToPreviousSlide}><i className=\"icon icon-arrow-left\"></i></button> \n\n    }\n    \n    \n    renderRegular(){\n        return this.state.children\n    }\n    \n    render(){\n        if(this.props.config.buttons == true){\n            return(\n                <React.Fragment>\n                    <div id=\"slides-container\">\n                    <div>{this.renderNavigatorPreviousButton()}</div>\n                    <div>{this.renderSlide()}</div>\n                    <div>{this.renderNavigatorNextButton()}</div>\n                    </div>   \n                </React.Fragment>\n            )\n        }\n        if(this.props.config.carousel == false){\n            return(\n                <React.Fragment>\n                    <div id=\"slides-container\">\n                    <div>{this.renderRegular()}</div>\n                    </div>   \n                </React.Fragment>\n            )\n        }\n    }\n}\n\nexport default Slides","import React, {Component} from \"react\"\nimport styled from \"styled-components\"\nimport 'spectre.css/dist/spectre.css';\nimport Slides from \"./Slides.js\"\n\nconst Projects = styled.h2`\ncolor:black;\nfont-family: 'Rajdhani', sans-serif;\n`\nconst slidesStyle = {\n    buttons: false,\n    carousel: false,\n}\nclass Project extends Component{\n\n\n    render(){\n\n        return(\n            <div>\n                <Projects>Projects</Projects>\n                <Slides config={slidesStyle}>\n                    <div >\n                        Box 1\n                    </div>\n                    <div >\n                        Box 2\n                    </div>\n\n                </Slides>\n\n            </div>\n        )\n    }\n\n}\n\n\nexport default Project;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport styled from 'styled-components';\nimport 'spectre.css/dist/spectre.css';\nimport Project from  './Project.js';\n\nconst Span = styled.span`\n    color:white;\n    font-family: 'Rajdhani', sans-serif;\n    display: block;\n`\nconst Hero = styled.div`\n    \n    background: rgba(8,3,42,0.09);\n`\nclass Portfolio extends Component{\n\n    render(){\n\n        return(\n            <React.Fragment>\n           <div className=\"hero\">\n            <Hero className=\"hero-box\">\n              <Span className=\"h1 hero-box_text\">gene radcliffe</Span>\n              <Span className=\"hero-box_text\">software developer</Span> \n            </Hero>\n           </div> \n            \n            <div>\n                <Project />\n            </div>\n            </React.Fragment>\n\n        );\n    }\n\n}\nexport default Portfolio;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Portfolio from './Portfolio';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Portfolio />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}